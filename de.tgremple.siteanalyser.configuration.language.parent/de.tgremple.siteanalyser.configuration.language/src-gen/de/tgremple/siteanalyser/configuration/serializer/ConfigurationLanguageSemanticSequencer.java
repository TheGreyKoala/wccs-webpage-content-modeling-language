/*
 * generated by Xtext 2.12.0
 */
package de.tgremple.siteanalyser.configuration.serializer;

import com.google.inject.Inject;
import de.tgremple.siteanalyser.configuration.configurationLanguage.ConfigurationLanguagePackage;
import de.tgremple.siteanalyser.configuration.configurationLanguage.ContentType;
import de.tgremple.siteanalyser.configuration.configurationLanguage.CssSelector;
import de.tgremple.siteanalyser.configuration.configurationLanguage.PageType;
import de.tgremple.siteanalyser.configuration.configurationLanguage.Property;
import de.tgremple.siteanalyser.configuration.configurationLanguage.ReferenceType;
import de.tgremple.siteanalyser.configuration.configurationLanguage.SiteStructure;
import de.tgremple.siteanalyser.configuration.configurationLanguage.UrlPatternSelector;
import de.tgremple.siteanalyser.configuration.services.ConfigurationLanguageGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ConfigurationLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ConfigurationLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ConfigurationLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ConfigurationLanguagePackage.CONTENT_TYPE:
				sequence_ContentType(context, (ContentType) semanticObject); 
				return; 
			case ConfigurationLanguagePackage.CSS_SELECTOR:
				sequence_CssSelector(context, (CssSelector) semanticObject); 
				return; 
			case ConfigurationLanguagePackage.PAGE_TYPE:
				sequence_PageType(context, (PageType) semanticObject); 
				return; 
			case ConfigurationLanguagePackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case ConfigurationLanguagePackage.REFERENCE_TYPE:
				sequence_ReferenceType(context, (ReferenceType) semanticObject); 
				return; 
			case ConfigurationLanguagePackage.SITE_STRUCTURE:
				sequence_SiteStructure(context, (SiteStructure) semanticObject); 
				return; 
			case ConfigurationLanguagePackage.URL_PATTERN_SELECTOR:
				sequence_UrlPatternSelector(context, (UrlPatternSelector) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Type returns ContentType
	 *     ContentType returns ContentType
	 *
	 * Constraint:
	 *     (name=ID selector=ContentSelector? properties+=Property*)
	 */
	protected void sequence_ContentType(ISerializationContext context, ContentType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContentSelector returns CssSelector
	 *     PageSelector returns CssSelector
	 *     CssSelector returns CssSelector
	 *
	 * Constraint:
	 *     definition=STRING
	 */
	protected void sequence_CssSelector(ISerializationContext context, CssSelector semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConfigurationLanguagePackage.Literals.PAGE_SELECTOR__DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConfigurationLanguagePackage.Literals.PAGE_SELECTOR__DEFINITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCssSelectorAccess().getDefinitionSTRINGTerminalRuleCall_1_0(), semanticObject.getDefinition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns PageType
	 *     PageType returns PageType
	 *
	 * Constraint:
	 *     (name=ID selector=PageSelector properties+=Property*)
	 */
	protected void sequence_PageType(ISerializationContext context, PageType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (name=ID type=[ContentType|ID] selector=ContentSelector?)
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns ReferenceType
	 *     ReferenceType returns ReferenceType
	 *
	 * Constraint:
	 *     (name=ID selector=ContentSelector? properties+=Property*)
	 */
	protected void sequence_ReferenceType(ISerializationContext context, ReferenceType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SiteStructure returns SiteStructure
	 *
	 * Constraint:
	 *     typeDefinitions+=Type+
	 */
	protected void sequence_SiteStructure(ISerializationContext context, SiteStructure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PageSelector returns UrlPatternSelector
	 *     UrlPatternSelector returns UrlPatternSelector
	 *
	 * Constraint:
	 *     definition=STRING
	 */
	protected void sequence_UrlPatternSelector(ISerializationContext context, UrlPatternSelector semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConfigurationLanguagePackage.Literals.PAGE_SELECTOR__DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConfigurationLanguagePackage.Literals.PAGE_SELECTOR__DEFINITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUrlPatternSelectorAccess().getDefinitionSTRINGTerminalRuleCall_2_0(), semanticObject.getDefinition());
		feeder.finish();
	}
	
	
}
