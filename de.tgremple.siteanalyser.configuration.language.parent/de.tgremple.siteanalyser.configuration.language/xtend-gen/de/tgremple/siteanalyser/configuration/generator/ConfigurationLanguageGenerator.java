/**
 * generated by Xtext 2.12.0
 */
package de.tgremple.siteanalyser.configuration.generator;

import com.google.common.collect.Iterators;
import de.tgremple.siteanalyser.configuration.configurationLanguage.ContentSelector;
import de.tgremple.siteanalyser.configuration.configurationLanguage.ContentType;
import de.tgremple.siteanalyser.configuration.configurationLanguage.CssSelector;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ConfigurationLanguageGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"use strict;\"");
    _builder.newLine();
    _builder.append("const functions = [];");
    _builder.newLine();
    {
      Iterable<ContentType> _iterable = IteratorExtensions.<ContentType>toIterable(Iterators.<ContentType>filter(resource.getAllContents(), ContentType.class));
      for(final ContentType contentType : _iterable) {
        CharSequence _compile = this.compile(contentType);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("exports.getFunctions = () => functions;");
    _builder.newLine();
    fsa.generateFile("site-analyser.conf.js", _builder);
  }
  
  public CharSequence compile(final ContentType contentType) {
    CharSequence _xifexpression = null;
    ContentSelector _selector = contentType.getSelector();
    if ((_selector instanceof CssSelector)) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("functions.push((document, createAnnotation) => createAnnotation(document, \"");
      ContentSelector _selector_1 = contentType.getSelector();
      String _definition = ((CssSelector) _selector_1).getDefinition();
      _builder.append(_definition);
      _builder.append("\", \"");
      String _name = contentType.getName();
      _builder.append(_name);
      _builder.append("\"));");
      _builder.newLineIfNotEmpty();
      _xifexpression = _builder;
    }
    return _xifexpression;
  }
}
