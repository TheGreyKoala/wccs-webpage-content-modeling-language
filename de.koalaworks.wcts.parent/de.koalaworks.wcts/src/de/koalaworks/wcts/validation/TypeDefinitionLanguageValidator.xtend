/*
 * generated by Xtext 2.12.0
 */
package de.koalaworks.wcts.validation

import org.eclipse.xtext.validation.Check
import de.koalaworks.wcts.typeDefinitionLanguage.Feature
import de.koalaworks.wcts.typeDefinitionLanguage.TypeDefinitionLanguagePackage
import de.koalaworks.wcts.typeDefinitionLanguage.ContentSelector
import de.koalaworks.wcts.typeDefinitionLanguage.ReferenceSelector
import de.koalaworks.wcts.typeDefinitionLanguage.UrlPatternSelector
import de.koalaworks.wcts.typeDefinitionLanguage.CssSelector
import de.koalaworks.wcts.typeDefinitionLanguage.XPathSelector
import de.koalaworks.wcts.typeDefinitionLanguage.ContentClass
import de.koalaworks.wcts.typeDefinitionLanguage.ReferenceClass
import de.koalaworks.wcts.typeDefinitionLanguage.FeatureClass
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class TypeDefinitionLanguageValidator extends AbstractTypeDefinitionLanguageValidator {
	
	public static val NO_INFERABLE_FEATURE_SELECTOR = 'noInferableFeatureSelector'
	public static val INVALID_CUSTOM_FEATURE_SELECTOR = 'invalidCustomFeatureSelector'
	
	public static final String EMPTY_CSS_SELECTOR = "emptyCssSelector"
	public static final String EMPTY_URL_PATTERN_SELECTOR = "emptyUrlPatternSelector"
	public static final String EMPTY_XPATH_SELECTOR = "emptyXPathSelector"

	@Check
	def ensureNonEmptyCssSelector(CssSelector selector) {
		ensureNonEmptySelector(selector.definition, selector, TypeDefinitionLanguagePackage.Literals.CSS_SELECTOR__DEFINITION, EMPTY_CSS_SELECTOR)
	}
	
	@Check
	def ensureNonEmptyUrlPatternSelector(UrlPatternSelector selector) {
		ensureNonEmptySelector(selector.definition, selector, TypeDefinitionLanguagePackage.Literals.URL_PATTERN_SELECTOR__DEFINITION, EMPTY_URL_PATTERN_SELECTOR)
	}
	
	@Check
	def ensureNonEmptyXPathSelector(XPathSelector selector) {
		ensureNonEmptySelector(selector.definition, selector, TypeDefinitionLanguagePackage.Literals.XPATH_SELECTOR__DEFINITION, EMPTY_XPATH_SELECTOR)
	}
	
	private def ensureNonEmptySelector(String definition, EObject source, EStructuralFeature feature, String code) {
		if (definition.trim.isEmpty) {
			error("Selector must not be empty.", source, feature, code)
		}
	}

	@Check
	def ensureInferableFeatureSelector(Feature feature) {
		if (feature.noInferableSelector) {
			error(feature.name + " requires an inferable selector. Either specify a selector for this particular feature, or a default selector for the class " + feature.featureClass.name + ".",
				feature, TypeDefinitionLanguagePackage.Literals.FEATURE__SELECTOR,
				NO_INFERABLE_FEATURE_SELECTOR
			);
		}
	}

	@Check
	def ensureFeatureSelectorTypeMatch(Feature feature) {
		if (feature.selector !== null && !(feature.featureClass.selectorType as Class).isAssignableFrom(feature.selector.class)) {
			error(feature.featureClass.displayName + " can not be recognized by " + feature.selector.messageSuffix + ".",
				feature, TypeDefinitionLanguagePackage.Literals.FEATURE__SELECTOR,
				INVALID_CUSTOM_FEATURE_SELECTOR
			);
		}
	}

	private def noInferableSelector(Feature feature) {
		return feature.noSelector && feature.featureClass.isKnown && feature.featureClass.noSelector
	}

	def dispatch messageSuffix(UrlPatternSelector urlPatternSelector) {
		return "an url pattern"
	}
	
	def dispatch messageSuffix(CssSelector cssSelector) {
		return "a css selector"
	}
	
	def dispatch messageSuffix(XPathSelector xPathSelector) {
		return "a xpath selector"
	}

	def dispatch displayName(ContentClass contentType) {
		return "Content"
	}

	def dispatch displayName(ReferenceClass referenceType) {
		return "Reference"
	}
	
	def dispatch selectorType(ContentClass contentType) {
		return ContentSelector
	}
	
	def dispatch selectorType(ReferenceClass contentType) {
		return ReferenceSelector
	}
	
	def dispatch noSelector(ContentClass contentType) {
		return contentType.selector === null;
	}
	
	def dispatch noSelector(Feature feature) {
		return feature.selector === null;
	}

	def dispatch noSelector(ReferenceClass referenceType) {
		return referenceType.selector === null;
	}
	
	def dispatch name(ContentClass contentType) {
		return contentType.name;
	}
	
	def dispatch name(ReferenceClass referenceType) {
		return referenceType.name;
	}

	def isKnown(FeatureClass featureType) {
		featureType.eContainer !== null
	}
}
