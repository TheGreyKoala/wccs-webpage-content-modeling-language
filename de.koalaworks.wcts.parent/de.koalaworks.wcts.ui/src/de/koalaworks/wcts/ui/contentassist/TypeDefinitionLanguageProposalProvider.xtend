/*
 * generated by Xtext 2.12.0
 */
package de.koalaworks.wcts.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class TypeDefinitionLanguageProposalProvider extends AbstractTypeDefinitionLanguageProposalProvider {
		
	override void complete_SELECTOR_VALUE(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		val proposal = createCompletionProposal("«  »", "Selector («  »)", null, context) as ConfigurableCompletionProposal
		proposal.cursorPosition = 2
		acceptor.accept(proposal)
		super.complete_SELECTOR_VALUE(model, ruleCall, context, acceptor)
	}
	
	/*override void complete_SiteStructure(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		val pageTypeProposal = createCompletionProposal("page type NAME", "Page Type", null, context) as ConfigurableCompletionProposal
		pageTypeProposal.selectionStart = "page type ".length
		pageTypeProposal.selectionLength = "NAME".length
		
		val contentTypeProposal = createCompletionProposal("content type NAME", "Content Type", null, context) as ConfigurableCompletionProposal
		contentTypeProposal.selectionStart = "content type ".length
		contentTypeProposal.selectionLength = "NAME".length
		
		acceptor.accept(pageTypeProposal)
		acceptor.accept(contentTypeProposal)
		
		super.complete_SiteStructure(model, ruleCall, context, acceptor)
	}*/
}
